<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonLanguageExtensions</name>
    </assembly>
    <members>
        <member name="T:CommonLanguageExtensions.BoolExtensions">
            <summary>
            Language extensions for type bool
            </summary>
        </member>
        <member name="M:CommonLanguageExtensions.BoolExtensions.ToYesNoString(System.Boolean)">
            <summary>
            Convert bool to English text
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLanguageExtensions.DateTimeExtensions">
            <summary>
            Date time extensions
            </summary>
        </member>
        <member name="M:CommonLanguageExtensions.DateTimeExtensions.ZeroPad(System.DateTime)">
            <summary>
            Returns passed datetime with zero padding using current culture separators
            </summary>
            <param name="dt"><seealso cref="T:System.DateTime"/></param>
            <returns></returns>
            <remarks>
            order of date parts year, month, day which can be changed to say month, day, year
            </remarks>
        </member>
        <member name="M:CommonLanguageExtensions.DateTimeExtensions.ZeroPad(System.DateTime,System.String,System.String)">
            <summary>
            Returns passed datetime with zero padding using user supplied separators
            </summary>
            <param name="dt"><see cref="T:System.DateTime"/></param>
            <param name="dateSeparator"></param>
            <param name="timeSeparator"></param>
            <returns></returns>
            <remarks>
            order of date parts year, month, day which can be changed to say month, day, year
            </remarks>
        </member>
        <member name="M:CommonLanguageExtensions.DateTimeExtensions.ShowPossibleTimeZones(System.DateTimeOffset)">
            <summary>
            Show possible time zone for a DateTimeOffset
            </summary>
            <param name="offsetTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns>list of possible time zones</returns>
            <remarks>
            var dstDate = new DateTime(Now.Year, Now.Month, Now.Day, 0, 0, 0);
            DateTimeOffset thisTime = new DateTimeOffset(dstDate, new TimeSpan(-7, 0, 0));
            Console.WriteLine("{0} could belong to the following time zones:", thisTime.ToString());
            thisTime.ShowPossibleTimeZones().ForEach(Console.WriteLine);
            </remarks>
        </member>
        <member name="T:CommonLanguageExtensions.GenericExtensions">
            <summary>
            Generic language extensions
            </summary>
        </member>
        <member name="M:CommonLanguageExtensions.GenericExtensions.Between``1(System.IComparable{``0},``0,``0)">
            <summary>
            Determine if T is between lower and upper
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="sender">Value to determine if between lower and upper</param>
            <param name="minimumValue">Lower of range</param>
            <param name="maximumValue">Upper of range</param>
            <returns>True if in range, false if not in range</returns>
            <example>
            <code lang="csharp">
            var startDate = new DateTime(2018, 12, 2, 1, 12, 0);
            var endDate = new DateTime(2018, 12, 15, 1, 12, 0);
            var theDate = new DateTime(2018, 12, 13, 1, 12, 0);
            Assert.IsTrue(theDate.Between(startDate,endDate));
            </code>
            </example>
        </member>
        <member name="M:CommonLanguageExtensions.GenericExtensions.BetweenExclusive``1(System.IComparable{``0},``0,``0)">
            <summary>Determines if a value is between two values, exclusive.</summary>
            <param name="sender">The source value.</param>
            <param name="minimumValue">The minimum value.</param>
            <param name="maximumValue">The Maximum value.</param>
            <returns><see langword="true"/> if the value is between the two values, exclusive.</returns>
        </member>
        <member name="M:CommonLanguageExtensions.GenericExtensions.IsPositive``1(``0)">
            <summary>
            Determine if value is positive
            </summary>
            <typeparam name="T">Type implementing IComparable</typeparam>
            <param name="value">Value to test</param>
            <returns>true if positive, false otherwise</returns>
        </member>
        <member name="M:CommonLanguageExtensions.GenericExtensions.IsNegative``1(``0)">
            <summary>
            Determine if value is negative
            </summary>
            <typeparam name="T">Type implementing IComparable</typeparam>
            <param name="value">Value to test</param>
            <returns>true if negative, false otherwise</returns>
        </member>
        <member name="T:CommonLanguageExtensions.StringExtensions">
            <summary>
            String extensions
            </summary>
        </member>
        <member name="M:CommonLanguageExtensions.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>
            Convert string to an enum member
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value if an issue arises in the form of an empty string</param>
            <returns></returns>
        </member>
        <member name="M:CommonLanguageExtensions.StringExtensions.SplitCamelCase(System.String)">
            <summary>
            Split string with space e.g. FirstName becomes First Name
            </summary>
            <param name="sender">string value with value like FirstName</param>
            <returns>Original string if not in proper format or a string with space between variable upper cased tokens</returns>
        </member>
        <member name="M:CommonLanguageExtensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            Determine if a string can be represented as a numeric.
            </summary>
            <param name="text">value to determine if can be converted to a string</param>
            <returns></returns>
        </member>
        <member name="M:CommonLanguageExtensions.StringExtensions.StripperNumbers(System.String)">
            <summary>
            Strip alpha characters from a string
            </summary>
            <param name="text">text to work against</param>
            <returns>A string devoid of anything other than numeric values</returns>
        </member>
        <member name="M:CommonLanguageExtensions.StringExtensions.AlphaToInteger(System.String,System.Int32@)">
            <summary>
            Get numbers from string
            </summary>
            <param name="text"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CommonLanguageExtensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determine if string is empty
            </summary>
            <param name="sender">String to test if null or whitespace</param>
            <returns>true if empty or false if not empty</returns>
        </member>
        <member name="M:CommonLanguageExtensions.StringExtensions.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Overload of the standard String.Contains method which provides case sensitivity.
            </summary>
            <param name="sender">String to search</param>
            <param name="pSubString">Sub string to match</param>
            <param name="pCaseInSensitive">Use case or ignore case</param>
            <returns>True if string is in sent string</returns>
        </member>
        <member name="M:CommonLanguageExtensions.StringExtensions.RemoveExtraSpaces(System.String)">
            <summary>
            Remove extra spaces in a string
            </summary>
            <param name="sender">string value</param>
            <returns>string with no extra spaces</returns>
        </member>
        <member name="M:CommonLanguageExtensions.StringExtensions.DumpHRefs(System.String,System.String)">
            <summary>
            Get parameters from a web address
            </summary>
            <param name="inputString">web address</param>
            <param name="key">parameter name</param>
            <returns></returns>
        </member>
        <member name="T:CommonLanguageExtensions.TimeSpanExtensions">
            <summary>
            TimeSpan extensions
            </summary>
        </member>
        <member name="M:CommonLanguageExtensions.TimeSpanExtensions.Formatted(System.TimeSpan,System.String)">
            <summary>
            Format a TimeSpan with AM PM
            </summary>
            <param name="sender">TimeSpan to format</param>
            <param name="format">Optional format</param>
            <returns></returns>
        </member>
        <member name="T:CommonLanguageExtensions.ValidateExtensions">
            <summary>
            Validation extensions
            </summary>
        </member>
        <member name="M:CommonLanguageExtensions.ValidateExtensions.IsValidSsnWithoutDashes(System.String)">
            <summary>
            Validate
              Don't allow "219-09-999" or "078-05-1120" explicitly
              Don't allow the SSN to begin with 666, 000 or anything between 900-999
              Explicit dash (separating Area and Group numbers)
              Don't allow the Group Number to be "00"
              Another dash (separating Group and Serial numbers)
              Don't allow last four digits to be "0000"
            </summary>
            <param name="value">SSN to validate</param>
            <returns>SSN passed validation</returns>
        </member>
        <member name="M:CommonLanguageExtensions.ValidateExtensions.IsValidSsnSimple(System.String)">
            <summary>
            Simple validate 9 digits
            </summary>
            <param name="value">SSN to validate</param>
            <returns>SSN passed validation</returns>
        </member>
        <member name="M:CommonLanguageExtensions.ValidateExtensions.CleanSsn(System.String)">
            <summary>
            Remove hyphens from string
            </summary>
            <param name="ssn">SSN to work with</param>
            <returns>SSN without hyphens</returns>
        </member>
    </members>
</doc>
